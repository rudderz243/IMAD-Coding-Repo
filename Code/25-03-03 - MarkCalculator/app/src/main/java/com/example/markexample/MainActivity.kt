package com.example.markexample

import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.text.isDigitsOnly
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        // AUTOGENERATED
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        // END OF AUTOGENERATED

        // declaring variables for the components
        val txt_mark1 = findViewById<EditText>(R.id.txt_mark1)
        val txt_mark2 = findViewById<EditText>(R.id.txt_mark2)
        val btn_calculate = findViewById<Button>(R.id.btn_calculate)
        val lbl_output = findViewById<TextView>(R.id.lbl_output)
        val btn_reset = findViewById<Button>(R.id.btn_reset)

        btn_calculate.setOnClickListener {
            /* here we get the data from the textboxes (txt_mark1 and txt_mark2 is what I called mine), and we then check if they contain
            only digits (numbers). we assign the answer of this check to the variables "mark1_test" and "mark2_test", so that we can use them later.
             the answers can only be 1 of 2, true when they contain digits, or false when they contain either nothing, or invalid characters */
            val mark1_test = txt_mark1.text.isDigitsOnly()
            val mark2_test = txt_mark2.text.isDigitsOnly()

            /* here we check if the variables "mark1_test" and "mark2_test" are true or false.
            if mark1_test is false, then we print out a message and stop our processing to prevent a crash. this is called error handling.
            we then do the same thing to mark2_test.
            finally, if both variables are true, we continue on with the programs logic.  */
            if (mark1_test != true) {
                lbl_output.text = "Invalid input in textbox 1"
            } else if (mark2_test != true) {
                lbl_output.text = "Invalid input in textbox 2"
            } else {
                /* here we convert the marks to double, add them together, divide them by 2, to get the average.
                we then, using a "when" statement, print out a message, depending on that users average.
                in this example, i did both "when", and "if-else" statements to demonstrate both ways, but you would only need to do 1 */
                val mark1 = txt_mark1.text.toString().toDouble()
                val mark2 = txt_mark2.text.toString().toDouble()
                val average: Double = (mark1 + mark2) / 2

                // "when" statement example
                when {
                    average in 0.0..49.9 -> lbl_output.text = "You did not qualify for the exam."
                    average in 50.0..59.9 -> lbl_output.text = "You just barely made it!"
                    average in 60.0..79.9 -> lbl_output.text = "Good job!"
                    average in 80.0..100.0 -> lbl_output.text = "You passed with flying colours!"
                    else -> lbl_output.text = "Invalid input."
                }

                // "if-else" statement example
                if (average in 0.0..49.9) {
                    lbl_output.text = "You did not qualify for the exam."
                } else if (average in 50.0..59.9) {
                    lbl_output.text = "You just barely made it!"
                } else if (average in 60.0..79.9) {
                    lbl_output.text = "Good job!"
                } else if (average in 80.0..100.0) {
                    lbl_output.text = "You passed with flying colours!"
                } else {
                    lbl_output.text = "Invalid input."
                }
            // this bracket is the end of the "else" statement that checks if the inputs are valid
            }
        // this bracket is the end of the instructions for what to do when the button is clicked
        }

        btn_reset.setOnClickListener {
            /* over here, we write instructions for what to do when our reset button (which i called btn_reset) is clicked.
            we clear the EditTexts (the boxes that the user types their marks into) by doing .clear(),
            and we clear the label (that displays the result) by setting its text to "" (blank) */
            txt_mark1.text.clear()
            txt_mark2.text.clear()
            lbl_output.text = ""
        // this bracket is the end of the instructions for what to do when the reset button is clicked
        }
    // this bracket is the end of the main function of the program, that all our code lives in
    }
// this bracket denotes the end of the file
}